---
- name: Configure Planit Server
  hosts: all
  become: true
  become_user: ubuntu
  vars:
    go_version: "1.23"
    domain: "planit.dylanrit.uk"
    planit_binary_path: "/usr/local/bin/planit/planit"
  
  tasks:
    - name: Update and upgrade packages
      register: update
      become_user: root
      apt:
        update_cache: yes
        upgrade: dist

    - name: Install required packages
      register: update
      become_user: root
      apt:
        name:
          - nginx
          - golang-1.23
          - certbot
          - python3-certbot-nginx
        state: present

    - name:  Allow incoming traffic on port 80
      become_user: root
      shell: iptables -I INPUT -p tcp --dport 80 -j ACCEPT

    - name:  Allow incoming traffic on port 443
      become_user: root
      shell: iptables -I INPUT -p tcp --dport 443 -j ACCEPT

    - name: Add Go binary path to the profile
      lineinfile:
        path: /home/ubuntu/.profile
        line: 'export PATH=/usr/lib/go-1.23/bin:$PATH'

    - name: Set environment variables for Go
      lineinfile:
        path: /home/ubuntu/.profile
        line: "export {{ item }}"
        create: yes
      with_items:
        - "PATH=/usr/lib/go-1.23/bin:$PATH"
        - "GOPATH=/home/ubuntu/go"
        - "GOMODCACHE=$GOPATH/pkg/mod"
        - "GOCACHE=$HOME/.cache/go-build"

    - name: Ensure planit directories exist
      become_user: root
      file:
        path: "{{ item }}"
        state: directory
        owner: ubuntu
        group: ubuntu
      loop:
        - /var/www/html
        - /etc/nginx/sites-available

    - name: Copy code
      register: copy
      become_user: root
      when: true
      copy:
        force: true
        src: '../server/'
        dest: '/usr/local/bin/planit/'
        owner: ubuntu
        group: ubuntu

    - name: Compile go
      when: copy.changed
      register: compile
      become_user: root
      shell: |
           . /home/ubuntu/.profile
           go build -o planit main.go
      args:
        chdir: /usr/local/bin/planit

    - name: Make binary executable
      file:
        path: "{{ planit_binary_path }}"
        mode: '0755'

    - name: Obtain SSL certificates with certbot
      become_user: root
      command: certbot certonly --standalone -d {{ domain }} --non-interactive --agree-tos -m {{ lookup('env', 'EMAIL') }}
      register: certbot_result
      ignore_errors: true

    - name: Check if certbot successfully issued certificates
      debug:
        msg: "SSL certificates successfully issued."
      when: certbot_result.rc == 0

    - name: Configure nginx 
      copy:
        content: |

          server {
              listen 80;
              listen [::]:80;

              server_name {{ domain }};

              location / {
                  proxy_pass http://localhost:8080;
                  proxy_set_header host $host;
                  proxy_set_header x-real-ip $remote_addr;
                  proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
                  proxy_set_header x-forwarded-proto $scheme;
                  proxy_http_version 1.1;
                  proxy_set_header upgrade $http_upgrade;
                  proxy_set_header connection "upgrade";
              }
          }

          server {
              listen 443 ssl;
              listen [::]:443 ssl;

              server_name {{ domain }};

              ssl_certificate /etc/letsencrypt/live/{{ domain }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/{{ domain }}/privkey.pem;

              location / {
                  proxy_pass http://localhost:8080;
                  proxy_set_header host $host;
                  proxy_set_header x-real-ip $remote_addr;
                  proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
                  proxy_set_header x-forwarded-proto $scheme;
                  proxy_http_version 1.1;
                  proxy_set_header upgrade $http_upgrade;
                  proxy_set_header connection "upgrade";
              }
          }
        dest: /etc/nginx/sites-available/planit.dylanrit.uk

    - name: Enable nginx site 
      become_user: root
      file:
        src: /etc/nginx/sites-available/planit.dylanrit.uk
        dest: /etc/nginx/sites-enabled/planit.dylanrit.uk
        state: link

    - name: Remove default nginx
      become_user: root
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Remove default nginx 2
      become_user: root
      file:
        path: /etc/nginx/sites-available/default
        state: absent

    - name: Reload nginx
      become_user: root
      service:
        name: nginx
        state: restarted

    - name: Configure systemd service
      become_user: root
      copy:
        content: |
          [Unit]
          Description=Planit Poker
          After=network.target

          [Service]
          ExecStart={{ planit_binary_path }}
          Restart=always
          User=ubuntu

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/planit.service

    - name: Reload and enable systemd service
      when: compile.changed
      become_user: root
      systemd:
        name: planit.service
        enabled: yes
        state: restarted

    - name: Reboot 
      when: update.changed
      become_user: root
      reboot:
        reboot_timeout: 600
        test_command: uptime
